{"version":3,"sources":["matrix.js","solver.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","rows","cols","this","parseInt","size","values","Array","fill","console","log","JSON","stringify","i","j","iA","k","mat_right","output","Matrix","new_values","temp","require","lhs","b","plu","luDecompositionPivot","upper_tri","lower_tri","permutation","transpose","p_inv_b","matMatMult","y_values","forwardSubstitution","backSubstitution","A","max_val","max_index","z","candidate","Math","abs","swapRows","s","kmax","solution","Solver","Cell","props","style","solved","failed","background","className","id","value","onChange","e","target","App","useState","dim","setDim","setSolved","matrix","setMatrix","setSolution","setFailed","rhs","setRHS","updateMatrix","slice","new_matrix","updateRHS","index","replace","href","type","min","max","event","isNaN","updateDim","onClick","new_solution","solveLU","length","toString","includes","new_rhs","apply","map","x","col","y","key","a","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d92c5e27.chunk.js","sourcesContent":["module.exports = class Matrix {\n  constructor(rows, cols) {\n    this.rows = parseInt(rows);\n    this.cols = parseInt(cols);\n    this.size = rows * cols;\n    this.values = new Array(this.size).fill(0);\n  }\n\n  printValues() {\n    console.log(JSON.stringify(this.values));\n  }\n\n  swapRows(i, j) {\n    // no swap required\n    if (i == j) {\n      return;\n    }\n\n    // create copy of the first row (both A and b)\n    let iA = new Array(this.cols).fill(0);\n\n    for (let k = 0; k < this.cols; k++) {\n      iA[k] = this.values[i * this.cols + k];\n    }\n\n    // swap the rows\n    for (let k = 0; k < this.cols; k++) {\n      //copy row j of A into row i of A\n      this.values[i * this.cols + k] = this.values[j * this.cols + k];\n\n      // copy row 1 into row 2\n      this.values[j * this.cols + k] = iA[k];\n    }\n  }\n\n  // assumes user has already created mat_right and output matrices\n  matMatMult(mat_right) {\n    // check dimensions make sense return without doing any multiplication\n    if (this.cols !== mat_right.rows) {\n      throw \"input dimensions don't match\";\n    }\n\n    // create an output matrix that will hold our values\n    let output = new Matrix(this.rows, mat_right.cols);\n\n    /*======================================\n     *  matrix multiplication is O(n^3).\n     *  Although this loop ordering takes advantage of caching, it\n     *  does not take advantage of BLAS routines (for row by row access).\n     *======================================*/\n    for (let i = 0; i < this.rows; i++) {\n      for (let k = 0; k < this.cols; k++) {\n        for (let j = 0; j < mat_right.cols; j++) {\n          output.values[i * output.cols + j] +=\n            this.values[i * this.cols + k] *\n            mat_right.values[k * mat_right.cols + j];\n        }\n      }\n    }\n\n    return output;\n  }\n\n  transpose() {\n    // create a new values array to hold the data\n    let new_values = new Array(this.size).fill(0);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        new_values[i * this.cols + j] = this.values[j * this.cols + i];\n      }\n    }\n\n    let temp = this.rows;\n    this.rows = this.cols;\n    this.cols = temp;\n    this.values = new_values;\n  }\n};\n","const Matrix = require(\"./matrix\");\n\nmodule.exports = class Solver {\n  solveLU(lhs, b) {\n    // construct LU decomposition of the lhs matrix - lhs gives us the permutation\n    let plu = this.luDecompositionPivot(lhs);\n\n    // create space to hold the upper triangular, lower triangular and permutation\n    let upper_tri = plu[2];\n    let lower_tri = plu[1];\n    let permutation = plu[0];\n\n    // transpose the permutation matrix\n    permutation.transpose();\n\n    // multiply the transpose of the permutation matrix by b\n    let p_inv_b = permutation.matMatMult(b);\n\n    // calculate the y values using forward substitution\n    let y_values = this.forwardSubstitution(lower_tri, p_inv_b); // memory cleared\n\n    // calculate the solution using back substitution and the y values we calculated earlier\n    let solution = this.backSubstitution(upper_tri, y_values); // return at end of function\n\n    return solution;\n  }\n\n  luDecompositionPivot(lhs) {\n    // make sure the matrix is square\n    if (lhs.cols !== lhs.rows) {\n      throw \"Input matrix must be square!\";\n    }\n\n    // make a copy of the lhs matrix\n    let A = new Matrix(lhs.rows, lhs.cols);\n    for (let i = 0; i < lhs.size; i++) {\n      A.values[i] = lhs.values[i];\n    }\n\n    let lower_tri = new Matrix(lhs.rows, lhs.cols);\n\n    let permutation = new Matrix(lhs.rows, lhs.cols);\n    for (let i = 0; i < permutation.rows; i++) {\n      permutation.values[i * permutation.cols + i] = 1;\n    }\n\n    let max_val;\n    let max_index;\n\n    for (let k = 0; k < A.rows - 1; k++) {\n      max_val = -1;\n      max_index = k;\n\n      for (let z = k; z < A.rows; z++) {\n        let candidate = Math.abs(A.values[z * A.cols + k]);\n        if (candidate > max_val) {\n          max_val = candidate;\n          max_index = z;\n        }\n      }\n\n      A.swapRows(k, max_index);\n      permutation.swapRows(k, max_index);\n      lower_tri.swapRows(k, max_index);\n\n      let s;\n\n      // loop over each equation below the pivot\n      for (let i = k + 1; i < A.rows; i++) {\n        // assumes row major order\n        s = A.values[i * A.cols + k] / A.values[k * A.cols + k];\n\n        // update the upper tri values using the scaling factor\n        for (let j = k; j < A.cols; j++) {\n          A.values[i * A.cols + j] -= s * A.values[k * A.cols + j];\n        }\n\n        // update the lower tri values\n        lower_tri.values[i * lower_tri.rows + k] = s;\n      }\n    }\n\n    // add 1s to the diagonal\n    for (let i = 0; i < A.rows; i++) {\n      lower_tri.values[i * lower_tri.rows + i] += 1;\n    }\n\n    permutation.transpose();\n\n    // transpose the permutation matrix\n    return [permutation, lower_tri, A];\n  }\n\n  upperTriangular(lhs, b) {\n    // check if A is square\n    if (lhs.rows !== lhs.cols) {\n      throw \"Input matrix must be square!\";\n    }\n\n    // check that the dimensions of A and b are compatible\n    if (lhs.rows !== b.size) {\n      throw \"The dimensions of A and b don't match!\";\n    }\n\n    // s is the scaling factor to adjust a row. kmax keeeps track of the index of the maximum value; need for pivoting\n    let s;\n    let kmax;\n\n    // loop over each pivot row except the last one\n    for (let k = 0; k < lhs.rows - 1; k++) {\n      // initialize with current pivot row\n      kmax = k;\n\n      // find pivot column to avoid zeros on diagonal\n      for (let i = k + 1; i < lhs.rows; i++) {\n        if (\n          Math.abs(lhs.values[kmax * lhs.cols + k]) <\n          Math.abs(lhs.values[i * lhs.cols + k])\n        ) {\n          kmax = i;\n        }\n      }\n\n      // swap the rows if we have found a bigger value in the column below the pivot\n      lhs.swapRows(kmax, k);\n      b.swapRows(kmax, k);\n\n      // loop over each row below the pivot\n      for (let i = k + 1; i < lhs.rows; i++) {\n        // calculate scaling value for lhs row\n        s = lhs.values[i * lhs.cols + k] / lhs.values[k * lhs.cols + k];\n\n        // start looping from k and update the row\n        for (let j = k; j < lhs.rows; j++) {\n          lhs.values[i * lhs.cols + j] -= s * lhs.values[k * lhs.cols + j];\n        }\n\n        // update corresponding entry of b\n        b.values[i] -= s * b.values[k];\n      }\n    }\n  }\n\n  backSubstitution(lhs, b) {\n    // check if A is square\n    if (lhs.rows !== lhs.cols) {\n      throw \"Input matrix must be square!\";\n    }\n\n    // check that the dimensions of A and b are compatible\n    if (lhs.rows !== b.size) {\n      throw \"The dimensions of A and b don't match!\";\n    }\n\n    // create an empty vector\n    let solution = new Matrix(b.rows, b.cols); // return at end of function\n\n    // scaling factor\n    let s;\n\n    // iterate over system backwards\n    for (let k = b.size - 1; k >= 0; k--) {\n      // scaling factor\n      s = 0;\n\n      for (let j = k + 1; j < b.size; j++) {\n        // assumes row major order\n        s += lhs.values[k * lhs.cols + j] * solution.values[j];\n      }\n\n      // adjust the values in the solution vector\n      solution.values[k] = (b.values[k] - s) / lhs.values[k * lhs.cols + k];\n    }\n\n    // console.log(\"back sub\", solution);\n    return solution;\n  }\n\n  forwardSubstitution(lhs, b) {\n    // console.log(\"lhs\", lhs.values, \"b\", b.values);\n    // check if A is square\n    if (lhs.rows !== lhs.cols) {\n      throw \"Input matrix must be square!\";\n    }\n\n    // check that the dimensions of A and b are compatible\n    if (lhs.rows !== b.size) {\n      throw \"The dimensions of A and b don't match!\";\n    }\n\n    // create an empty vector\n    let solution = new Matrix(b.rows, b.cols);\n\n    // scaling factor\n    let s;\n\n    // iterate over system\n    for (let k = 0; k < b.size; k++) {\n      s = 0;\n\n      for (let j = 0; j < k; j++) {\n        // assumes row major order\n        s = s + lhs.values[k * lhs.cols + j] * solution.values[j];\n      }\n\n      // adjust the values in the solution vector\n      solution.values[k] = (b.values[k] - s) / lhs.values[k * lhs.cols + k];\n    }\n\n    // console.log(\"forward sub\", solution);\n\n    return solution;\n  }\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nconst Matrix = require(\"./matrix\");\nconst Solver = require(\"./solver\");\n\nfunction Cell(props) {\n  let style = {};\n\n  if (props.solved) {\n    if (props.failed) {\n      style = { background: \"red\" };\n    } else {\n      style = { background: \"#8FBC8F\" };\n    }\n  }\n\n  return (\n    <input\n      style={style}\n      className=\"cell\"\n      id={props.id}\n      value={props.value}\n      onChange={(e) => props.onChange(props.id, e.target.value)}\n    ></input>\n  );\n}\n\nfunction App() {\n  let [dim, setDim] = useState(2);\n  let [solved, setSolved] = useState(false);\n  let [matrix, setMatrix] = useState(new Matrix(dim, dim));\n  let [solution, setSolution] = useState(new Matrix(dim, 1));\n  let [failed, setFailed] = useState(false);\n  let [rhs, setRHS] = useState(new Matrix(dim, 1));\n\n  function updateMatrix(i, value) {\n    let new_values = matrix.values.slice();\n    let new_matrix = new Matrix(matrix.rows, matrix.cols);\n    new_values[i] = value;\n    new_matrix.values = new_values;\n    setMatrix(new_matrix);\n  }\n\n  function updateRHS(i, value) {\n    let index = i.replace(/\\D/g, \"\");\n    let new_values = rhs.values.slice();\n    let new_matrix = new Matrix(matrix.rows, 1);\n    new_values[index] = value;\n    new_matrix.values = new_values;\n    setRHS(new_matrix);\n  }\n\n  function updateDim(value) {\n    let dim = isNaN(parseInt(value)) ? 2 : parseInt(value);\n    if (dim > 10) {\n      dim = 10;\n    } else if (dim < 2) {\n      dim = 2;\n    }\n    setMatrix(new Matrix(dim, dim));\n    setRHS(new Matrix(dim, 1));\n    setDim(dim);\n  }\n\n  function solve() {\n    let solver = new Solver();\n    let new_solution = solver.solveLU(matrix, rhs);\n\n    for (let i = 0; i < new_solution.values.length; i++) {\n      if (isNaN(new_solution.values[i])) {\n        new_solution.values[i] = new_solution.values[i].toString();\n      }\n    }\n\n    if (new_solution.values.includes(\"NaN\")) {\n      setFailed(true);\n    } else {\n      setFailed(false);\n    }\n\n    setSolved(true);\n    setSolution(new_solution);\n  }\n\n  function reset() {\n    let new_dim = 2;\n    let new_solved = false;\n    let new_matrix = new Matrix(dim, dim);\n    let new_solution = new Matrix(dim, 1);\n    let new_failed = false;\n    let new_rhs = new Matrix(dim, 1);\n\n    setDim(new_dim);\n    setSolved(new_solved);\n    setMatrix(new_matrix);\n    setSolution(new_solution);\n    setFailed(new_failed);\n    setRHS(new_rhs);\n  }\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <a href=\"https://fazalkhan.net/\"> back to Fazi's Homepage</a>\n      </nav>\n      <div className=\"title\">Matrix Solver</div>\n      <div className=\"description\">\n        <p>\n          This is a matrix solver written in Javascript using React. It directly\n          solves a system of equations of the form\n          <span className=\"bold\"> Ax = b</span> using an LU decomposition with\n          partial pivoting. <br></br>\n          <br></br>\n          1. Input the values in the matrix on the left. <br></br> <br></br>\n          2. Input the right-hand side. <br></br> <br></br>\n          3. Hit solve. <br></br> <br></br>\n          If a solution exists, the variable column will show the solution\n          values and turn green from grey. <br></br> <br></br>\n          If a solution does not exist, the variable column will turn red from\n          grey.\n        </p>\n      </div>\n\n      <div className=\"inputs\">\n        <span className=\"dimensions\">#Rows:</span>\n        <input\n          className=\"slider\"\n          type=\"number\"\n          min=\"2\"\n          max=\"10\"\n          value={dim}\n          onChange={(event) => updateDim(event.target.value)}\n        ></input>\n\n        <button className=\"solve-button\" onClick={solve}>\n          Solve\n        </button>\n        <button className=\"reset-button\" onClick={reset}>\n          Reset\n        </button>\n      </div>\n\n      <div className=\"content\">\n        <div className=\"grid\">\n          <div className=\"matrix\">\n            <div>\n              {Array.apply(null, Array(dim)).map(function (x, i) {\n                const col = Array.apply(null, Array(dim)).map(function (y, j) {\n                  return (\n                    <Cell\n                      key={i * dim + j}\n                      id={i * dim + j}\n                      value={matrix.values[i * dim + j]}\n                      onChange={updateMatrix}\n                    />\n                  );\n                });\n                return <div key={i}>{col}</div>;\n              })}\n            </div>\n          </div>\n          <div className=\"variables\">\n            {Array.apply(null, Array(dim)).map(function (x, i) {\n              return (\n                <Cell\n                  failed={failed}\n                  solved={solved}\n                  key={\"x\" + i}\n                  id={\"x\" + i}\n                  value={solved ? solution.values[i] : \"x\" + i}\n                  onChange={(a, b) => {}}\n                />\n              );\n            })}\n          </div>\n          <div className=\"equalsign\"> = </div>\n          <div className=\"rhs\">\n            {Array.apply(null, Array(dim)).map(function (x, i) {\n              return (\n                <Cell\n                  key={\"rhs\" + i}\n                  id={\"rhs\" + i}\n                  value={rhs.values[i]}\n                  onChange={updateRHS}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}